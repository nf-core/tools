/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/mock-pipeline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input = null

    // Boilerplate options
    outdir = null
    version = false
    trace_report_suffix = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

    // Set up params for testing containers defined in config
    annotation_cache = true
    snpEff_cache = false
    snpEff_cache = true
}

// example from methylseq 1.0
params.container = 'nfcore/methylseq:1.0'

// example from methylseq 1.4 [Mercury Rattlesnake]
process.container = 'nfcore/methylseq:1.4'

process {

    // example from Sarek 2.5

    withName: Snpeff {
        container = { params.annotation_cache && params.snpEff_cache ? 'nfcore/sarek:dev' : "nfcore/sareksnpeff:dev.${params.genome}" }
        errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
    }
    withLabel: VEP {
        container = { params.annotation_cache && params.vep_cache ? 'nfcore/sarek:dev' : "nfcore/sarekvep:dev.${params.genome}" }
        errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
    }

    // example from differentialabundance 1.2.0

    withName: RMARKDOWNNOTEBOOK {
        conda = "bioconda::r-shinyngs=1.7.1"
        container = { "${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-shinyngs:1.7.1--r42hdfd78af_1' : 'quay.io/biocontainers/r-shinyngs:1.7.1--r42hdfd78af_1'}" }
    }
}

process {
    // TODO nf-core: Check the defaults for all processes
    cpus = { 1 * task.attempt }
    memory = { 6.GB * task.attempt }
    time = { 4.h * task.attempt }

    // 175 signals that the Pipeline had an unrecoverable error while
    // restoring a Snapshot via Fusion Snapshots.
    errorStrategy = { task.exitStatus in ((130..145) + 104 + 175) ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'
}

profiles {
    debug {
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        conda.channels = ['conda-forge', 'bioconda']
        apptainer.enabled = false
    }
    mamba {
        conda.enabled = true
        conda.useMamba = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    docker {
        docker.enabled = true
        conda.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        conda.enabled = false
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    podman {
        podman.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    shifter {
        shifter.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        charliecloud.enabled = false
        apptainer.enabled = false
    }
    charliecloud {
        charliecloud.enabled = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        apptainer.enabled = false
    }
    apptainer {
        apptainer.enabled = true
        apptainer.autoMounts = true
        conda.enabled = false
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    wave {
        apptainer.ociAutoPull = true
        singularity.ociAutoPull = true
        wave.enabled = true
        wave.freeze = true
        wave.strategy = 'conda,container'
    }
    gpu {
        docker.runOptions = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions = '--nv'
        singularity.runOptions = '--nv'
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}



// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry = 'quay.io'
docker.registry = 'quay.io'
podman.registry = 'quay.io'
singularity.registry = 'quay.io'
charliecloud.registry = 'quay.io'



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER = "/.Rprofile"
    R_ENVIRON_USER = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",
    "-e",
    "-u",
    "-o",
    "pipefail",
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name = 'nf-core/mock-pipeline'
    contributors = [
        [
            name: 'fds',
            affiliation: '',
            email: '',
            github: '',
            contribution: [],
            orcid: '',
        ]
    ]
    homePage = 'https://github.com/nf-core/mock-pipeline'
    description = """dfsfjl"""
    mainScript = 'main.nf'
    defaultBranch = 'master'
    nextflowVersion = '!>=25.04.4'
    version = '1.0.0dev'
    doi = ''
}
