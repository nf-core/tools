name: Create a pipeline and run nf-core linting
on: [push, pull_request]

env:
  NXF_ANSI_LOG: false
  CAPSULE_LOG: none

jobs:
  MakeTestWorkflow:
    runs-on: ubuntu-latest
    env:
      NXF_ANSI_LOG: false
    strategy:
      matrix:
        # Nextflow versions
        include:
          # Test pipeline minimum Nextflow version
          - NXF_VER: "21.10.3"
            NXF_EDGE: ""
          # Test latest edge release of Nextflow
          - NXF_VER: ""
            NXF_EDGE: "1"
    steps:
      # Get the repo code
      - uses: actions/checkout@v2
        name: Check out source-code repository

      # Set up nf-core/tools
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

      # Set up Nextflow
      - name: Install Nextflow
        env:
          NXF_VER: ${{ matrix.NXF_VER }}
          # Uncomment only if the edge release is more recent than the latest stable release
          # See https://github.com/nextflow-io/nextflow/issues/2467
          # NXF_EDGE: ${{ matrix.NXF_EDGE }}
        run: |
          wget -qO- get.nextflow.io | bash
          sudo mv nextflow /usr/local/bin/

      # Install the Prettier linting tools
      - uses: actions/setup-node@v2

      - name: Install Prettier
        run: npm install -g prettier

      # Install the editorconfig linting tools
      - name: Install editorconfig-checker
        run: npm install -g editorconfig-checker

      # Build a pipeline from the template
      - name: nf-core create
        run: nf-core --log-file log.txt create -n testpipeline -d "This pipeline is for testing" -a "Testing McTestface"

      # Try syncing it before we change anything
      - name: nf-core sync
        run: nf-core --log-file log.txt sync --dir nf-core-testpipeline/

      # Build a module from the template
      - name: nf-core modules create
        run: nf-core --log-file log.txt modules create bpipe --dir nf-core-testpipeline --author @nf-core-bot --label process_low --meta

      # Run code style linting
      - name: Run Prettier --check
        run: prettier --check nf-core-testpipeline

      - name: Run ECLint check
        run: editorconfig-checker -exclude README.md $(git ls-files | grep -v test)

      # Update modules to the latest version
      - name: nf-core modules update
        run: nf-core --log-file log.txt modules update --dir nf-core-testpipeline --all --no-preview

      # Run nf-core linting
      - name: nf-core lint
        run: nf-core --log-file log.txt lint --dir nf-core-testpipeline --fail-ignored

      # Run the other nf-core commands
      - name: nf-core list
        run: nf-core --log-file log.txt list

      # - name: nf-core licences
      #   run: nf-core --log-file log.txt licences nf-core-testpipeline

      - name: nf-core schema
        run: nf-core --log-file log.txt schema build --dir nf-core-testpipeline/ --no-prompts

      - name: nf-core bump-version
        run: nf-core --log-file log.txt bump-version --dir nf-core-testpipeline/ 1.1

      - name: nf-core lint in release mode
        run: nf-core --log-file log.txt lint --dir nf-core-testpipeline --fail-ignored --release

      - name: nf-core modules install
        run: nf-core --log-file log.txt modules install fastqc --dir nf-core-testpipeline/ --force

      - name: Upload log file artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: nf-core-log-file
          path: log.txt
